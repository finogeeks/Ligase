// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: syncserver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SyncRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID    string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	RoomState string `protobuf:"bytes,2,opt,name=roomState,proto3" json:"roomState,omitempty"`
	Start     int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End       int64  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SyncRoom) Reset() {
	*x = SyncRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRoom) ProtoMessage() {}

func (x *SyncRoom) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRoom.ProtoReflect.Descriptor instead.
func (*SyncRoom) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{0}
}

func (x *SyncRoom) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *SyncRoom) GetRoomState() string {
	if x != nil {
		return x.RoomState
	}
	return ""
}

func (x *SyncRoom) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SyncRoom) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type SyncProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType      string      `protobuf:"bytes,1,opt,name=requestType,proto3" json:"requestType,omitempty"`
	InviteRooms      []*SyncRoom `protobuf:"bytes,2,rep,name=inviteRooms,proto3" json:"inviteRooms,omitempty"`
	JoinRooms        []*SyncRoom `protobuf:"bytes,3,rep,name=joinRooms,proto3" json:"joinRooms,omitempty"`
	LeaveRooms       []*SyncRoom `protobuf:"bytes,4,rep,name=leaveRooms,proto3" json:"leaveRooms,omitempty"`
	JoinedRooms      []string    `protobuf:"bytes,5,rep,name=joinedRooms,proto3" json:"joinedRooms,omitempty"`
	UserID           string      `protobuf:"bytes,6,opt,name=userID,proto3" json:"userID,omitempty"`
	DeviceID         string      `protobuf:"bytes,7,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	ReceiptOffset    int64       `protobuf:"varint,8,opt,name=receiptOffset,proto3" json:"receiptOffset,omitempty"`
	MaxReceiptOffset int64       `protobuf:"varint,9,opt,name=MaxReceiptOffset,proto3" json:"MaxReceiptOffset,omitempty"`
	IsHuman          bool        `protobuf:"varint,10,opt,name=isHuman,proto3" json:"isHuman,omitempty"`
	Limit            int32       `protobuf:"varint,11,opt,name=limit,proto3" json:"limit,omitempty"`
	SyncInstance     int32       `protobuf:"varint,12,opt,name=syncInstance,proto3" json:"syncInstance,omitempty"`
	IsFullSync       bool        `protobuf:"varint,13,opt,name=isFullSync,proto3" json:"isFullSync,omitempty"`
	TraceID          string      `protobuf:"bytes,14,opt,name=traceID,proto3" json:"traceID,omitempty"`
	Slot             int32       `protobuf:"varint,15,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *SyncProcessReq) Reset() {
	*x = SyncProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProcessReq) ProtoMessage() {}

func (x *SyncProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProcessReq.ProtoReflect.Descriptor instead.
func (*SyncProcessReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{1}
}

func (x *SyncProcessReq) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *SyncProcessReq) GetInviteRooms() []*SyncRoom {
	if x != nil {
		return x.InviteRooms
	}
	return nil
}

func (x *SyncProcessReq) GetJoinRooms() []*SyncRoom {
	if x != nil {
		return x.JoinRooms
	}
	return nil
}

func (x *SyncProcessReq) GetLeaveRooms() []*SyncRoom {
	if x != nil {
		return x.LeaveRooms
	}
	return nil
}

func (x *SyncProcessReq) GetJoinedRooms() []string {
	if x != nil {
		return x.JoinedRooms
	}
	return nil
}

func (x *SyncProcessReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SyncProcessReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SyncProcessReq) GetReceiptOffset() int64 {
	if x != nil {
		return x.ReceiptOffset
	}
	return 0
}

func (x *SyncProcessReq) GetMaxReceiptOffset() int64 {
	if x != nil {
		return x.MaxReceiptOffset
	}
	return 0
}

func (x *SyncProcessReq) GetIsHuman() bool {
	if x != nil {
		return x.IsHuman
	}
	return false
}

func (x *SyncProcessReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SyncProcessReq) GetSyncInstance() int32 {
	if x != nil {
		return x.SyncInstance
	}
	return 0
}

func (x *SyncProcessReq) GetIsFullSync() bool {
	if x != nil {
		return x.IsFullSync
	}
	return false
}

func (x *SyncProcessReq) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *SyncProcessReq) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type SyncProcessRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms            *SyncProcessRsp_Rooms `protobuf:"bytes,1,opt,name=rooms,proto3" json:"rooms,omitempty"`
	MaxReceiptOffset int64                 `protobuf:"varint,2,opt,name=maxReceiptOffset,proto3" json:"maxReceiptOffset,omitempty"`
	AllLoaded        bool                  `protobuf:"varint,3,opt,name=allLoaded,proto3" json:"allLoaded,omitempty"`
	NewUsers         []string              `protobuf:"bytes,4,rep,name=newUsers,proto3" json:"newUsers,omitempty"`
	Ready            bool                  `protobuf:"varint,5,opt,name=ready,proto3" json:"ready,omitempty"`
	MaxRoomOffset    map[string]int64      `protobuf:"bytes,6,rep,name=maxRoomOffset,proto3" json:"maxRoomOffset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SyncProcessRsp) Reset() {
	*x = SyncProcessRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProcessRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProcessRsp) ProtoMessage() {}

func (x *SyncProcessRsp) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProcessRsp.ProtoReflect.Descriptor instead.
func (*SyncProcessRsp) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{2}
}

func (x *SyncProcessRsp) GetRooms() *SyncProcessRsp_Rooms {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *SyncProcessRsp) GetMaxReceiptOffset() int64 {
	if x != nil {
		return x.MaxReceiptOffset
	}
	return 0
}

func (x *SyncProcessRsp) GetAllLoaded() bool {
	if x != nil {
		return x.AllLoaded
	}
	return false
}

func (x *SyncProcessRsp) GetNewUsers() []string {
	if x != nil {
		return x.NewUsers
	}
	return nil
}

func (x *SyncProcessRsp) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *SyncProcessRsp) GetMaxRoomOffset() map[string]int64 {
	if x != nil {
		return x.MaxRoomOffset
	}
	return nil
}

type GetPusherByDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
}

func (x *GetPusherByDeviceReq) Reset() {
	*x = GetPusherByDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPusherByDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPusherByDeviceReq) ProtoMessage() {}

func (x *GetPusherByDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPusherByDeviceReq.ProtoReflect.Descriptor instead.
func (*GetPusherByDeviceReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{3}
}

func (x *GetPusherByDeviceReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPusherByDeviceReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

type GetPusherRuleByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
}

func (x *GetPusherRuleByUserReq) Reset() {
	*x = GetPusherRuleByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPusherRuleByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPusherRuleByUserReq) ProtoMessage() {}

func (x *GetPusherRuleByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPusherRuleByUserReq.ProtoReflect.Descriptor instead.
func (*GetPusherRuleByUserReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{4}
}

func (x *GetPusherRuleByUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPusherRuleByUserReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

type GetPushDataBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Slot  uint32   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *GetPushDataBatchReq) Reset() {
	*x = GetPushDataBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPushDataBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushDataBatchReq) ProtoMessage() {}

func (x *GetPushDataBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushDataBatchReq.ProtoReflect.Descriptor instead.
func (*GetPushDataBatchReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{5}
}

func (x *GetPushDataBatchReq) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetPushDataBatchReq) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type RespPushData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pushers *Pushers `protobuf:"bytes,1,opt,name=pushers,proto3" json:"pushers,omitempty"`
	Rules   *Rules   `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RespPushData) Reset() {
	*x = RespPushData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespPushData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespPushData) ProtoMessage() {}

func (x *RespPushData) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespPushData.ProtoReflect.Descriptor instead.
func (*RespPushData) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{6}
}

func (x *RespPushData) GetPushers() *Pushers {
	if x != nil {
		return x.Pushers
	}
	return nil
}

func (x *RespPushData) GetRules() *Rules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type GetPushDataBatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*RespPushData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPushDataBatchRsp) Reset() {
	*x = GetPushDataBatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPushDataBatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPushDataBatchRsp) ProtoMessage() {}

func (x *GetPushDataBatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPushDataBatchRsp.ProtoReflect.Descriptor instead.
func (*GetPushDataBatchRsp) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{7}
}

func (x *GetPushDataBatchRsp) GetData() map[string]*RespPushData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPusherBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []string `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Slot  uint32   `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *GetPusherBatchReq) Reset() {
	*x = GetPusherBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPusherBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPusherBatchReq) ProtoMessage() {}

func (x *GetPusherBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPusherBatchReq.ProtoReflect.Descriptor instead.
func (*GetPusherBatchReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{8}
}

func (x *GetPusherBatchReq) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetPusherBatchReq) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type GetPusherBatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*Pushers `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPusherBatchRsp) Reset() {
	*x = GetPusherBatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPusherBatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPusherBatchRsp) ProtoMessage() {}

func (x *GetPusherBatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPusherBatchRsp.ProtoReflect.Descriptor instead.
func (*GetPusherBatchRsp) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{9}
}

func (x *GetPusherBatchRsp) GetData() map[string]*Pushers {
	if x != nil {
		return x.Data
	}
	return nil
}

type OnReceiptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	DeviceID    string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID,omitempty"`
	RoomID      string `protobuf:"bytes,3,opt,name=roomID,proto3" json:"roomID,omitempty"`
	ReceiptType string `protobuf:"bytes,4,opt,name=receiptType,proto3" json:"receiptType,omitempty"`
	EventID     string `protobuf:"bytes,5,opt,name=eventID,proto3" json:"eventID,omitempty"`
}

func (x *OnReceiptReq) Reset() {
	*x = OnReceiptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnReceiptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnReceiptReq) ProtoMessage() {}

func (x *OnReceiptReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnReceiptReq.ProtoReflect.Descriptor instead.
func (*OnReceiptReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{10}
}

func (x *OnReceiptReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OnReceiptReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *OnReceiptReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *OnReceiptReq) GetReceiptType() string {
	if x != nil {
		return x.ReceiptType
	}
	return ""
}

func (x *OnReceiptReq) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

type OnTypingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RoomID string `protobuf:"bytes,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	UserID string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *OnTypingReq) Reset() {
	*x = OnTypingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnTypingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnTypingReq) ProtoMessage() {}

func (x *OnTypingReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnTypingReq.ProtoReflect.Descriptor instead.
func (*OnTypingReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{11}
}

func (x *OnTypingReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OnTypingReq) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *OnTypingReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type OnUnreadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinRooms    []string `protobuf:"bytes,1,rep,name=joinRooms,proto3" json:"joinRooms,omitempty"`
	UserID       string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	SyncInstance uint32   `protobuf:"varint,3,opt,name=syncInstance,proto3" json:"syncInstance,omitempty"`
}

func (x *OnUnreadReq) Reset() {
	*x = OnUnreadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnUnreadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnUnreadReq) ProtoMessage() {}

func (x *OnUnreadReq) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnUnreadReq.ProtoReflect.Descriptor instead.
func (*OnUnreadReq) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{12}
}

func (x *OnUnreadReq) GetJoinRooms() []string {
	if x != nil {
		return x.JoinRooms
	}
	return nil
}

func (x *OnUnreadReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OnUnreadReq) GetSyncInstance() uint32 {
	if x != nil {
		return x.SyncInstance
	}
	return 0
}

type OnUnreadRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *OnUnreadRsp) Reset() {
	*x = OnUnreadRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnUnreadRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnUnreadRsp) ProtoMessage() {}

func (x *OnUnreadRsp) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnUnreadRsp.ProtoReflect.Descriptor instead.
func (*OnUnreadRsp) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{13}
}

func (x *OnUnreadRsp) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SyncProcessRsp_Rooms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Join   map[string]*JoinResponse   `protobuf:"bytes,1,rep,name=join,proto3" json:"join,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Invite map[string]*InviteResponse `protobuf:"bytes,2,rep,name=invite,proto3" json:"invite,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Leave  map[string]*LeaveResponse  `protobuf:"bytes,3,rep,name=leave,proto3" json:"leave,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SyncProcessRsp_Rooms) Reset() {
	*x = SyncProcessRsp_Rooms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syncserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncProcessRsp_Rooms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncProcessRsp_Rooms) ProtoMessage() {}

func (x *SyncProcessRsp_Rooms) ProtoReflect() protoreflect.Message {
	mi := &file_syncserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncProcessRsp_Rooms.ProtoReflect.Descriptor instead.
func (*SyncProcessRsp_Rooms) Descriptor() ([]byte, []int) {
	return file_syncserver_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SyncProcessRsp_Rooms) GetJoin() map[string]*JoinResponse {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *SyncProcessRsp_Rooms) GetInvite() map[string]*InviteResponse {
	if x != nil {
		return x.Invite
	}
	return nil
}

func (x *SyncProcessRsp_Rooms) GetLeave() map[string]*LeaveResponse {
	if x != nil {
		return x.Leave
	}
	return nil
}

var File_syncserver_proto protoreflect.FileDescriptor

var file_syncserver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x68, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x86, 0x04, 0x0a, 0x0e, 0x53,
	0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x0a, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x75, 0x6c,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x22, 0xed, 0x05, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52,
	0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x4d, 0x61,
	0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a,
	0x9f, 0x03, 0x0a, 0x05, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d,
	0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x73, 0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x1a, 0x49, 0x0a, 0x09, 0x4a, 0x6f,
	0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72,
	0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22,
	0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22, 0x3f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x56,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x73, 0x52, 0x07, 0x70, 0x75,
	0x73, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x49, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x50, 0x75, 0x73,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68,
	0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x44, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x96, 0x01, 0x0a, 0x0c, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x0b, 0x4f, 0x6e, 0x54,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x0b,
	0x4f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6a,
	0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x4f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x87, 0x04, 0x0a, 0x0a, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x79, 0x6e,
	0x63, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x73, 0x68, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x42, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x65, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x09, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x4f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x4f, 0x6e,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x54, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x08, 0x4f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x6e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syncserver_proto_rawDescOnce sync.Once
	file_syncserver_proto_rawDescData = file_syncserver_proto_rawDesc
)

func file_syncserver_proto_rawDescGZIP() []byte {
	file_syncserver_proto_rawDescOnce.Do(func() {
		file_syncserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_syncserver_proto_rawDescData)
	})
	return file_syncserver_proto_rawDescData
}

var file_syncserver_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_syncserver_proto_goTypes = []interface{}{
	(*SyncRoom)(nil),               // 0: pb.SyncRoom
	(*SyncProcessReq)(nil),         // 1: pb.SyncProcessReq
	(*SyncProcessRsp)(nil),         // 2: pb.SyncProcessRsp
	(*GetPusherByDeviceReq)(nil),   // 3: pb.GetPusherByDeviceReq
	(*GetPusherRuleByUserReq)(nil), // 4: pb.GetPusherRuleByUserReq
	(*GetPushDataBatchReq)(nil),    // 5: pb.GetPushDataBatchReq
	(*RespPushData)(nil),           // 6: pb.RespPushData
	(*GetPushDataBatchRsp)(nil),    // 7: pb.GetPushDataBatchRsp
	(*GetPusherBatchReq)(nil),      // 8: pb.GetPusherBatchReq
	(*GetPusherBatchRsp)(nil),      // 9: pb.GetPusherBatchRsp
	(*OnReceiptReq)(nil),           // 10: pb.OnReceiptReq
	(*OnTypingReq)(nil),            // 11: pb.OnTypingReq
	(*OnUnreadReq)(nil),            // 12: pb.OnUnreadReq
	(*OnUnreadRsp)(nil),            // 13: pb.OnUnreadRsp
	(*SyncProcessRsp_Rooms)(nil),   // 14: pb.SyncProcessRsp.Rooms
	nil,                            // 15: pb.SyncProcessRsp.MaxRoomOffsetEntry
	nil,                            // 16: pb.SyncProcessRsp.Rooms.JoinEntry
	nil,                            // 17: pb.SyncProcessRsp.Rooms.InviteEntry
	nil,                            // 18: pb.SyncProcessRsp.Rooms.LeaveEntry
	nil,                            // 19: pb.GetPushDataBatchRsp.DataEntry
	nil,                            // 20: pb.GetPusherBatchRsp.DataEntry
	(*Pushers)(nil),                // 21: pb.Pushers
	(*Rules)(nil),                  // 22: pb.Rules
	(*JoinResponse)(nil),           // 23: pb.JoinResponse
	(*InviteResponse)(nil),         // 24: pb.InviteResponse
	(*LeaveResponse)(nil),          // 25: pb.LeaveResponse
	(*Empty)(nil),                  // 26: pb.Empty
}
var file_syncserver_proto_depIdxs = []int32{
	0,  // 0: pb.SyncProcessReq.inviteRooms:type_name -> pb.SyncRoom
	0,  // 1: pb.SyncProcessReq.joinRooms:type_name -> pb.SyncRoom
	0,  // 2: pb.SyncProcessReq.leaveRooms:type_name -> pb.SyncRoom
	14, // 3: pb.SyncProcessRsp.rooms:type_name -> pb.SyncProcessRsp.Rooms
	15, // 4: pb.SyncProcessRsp.maxRoomOffset:type_name -> pb.SyncProcessRsp.MaxRoomOffsetEntry
	21, // 5: pb.RespPushData.pushers:type_name -> pb.Pushers
	22, // 6: pb.RespPushData.rules:type_name -> pb.Rules
	19, // 7: pb.GetPushDataBatchRsp.data:type_name -> pb.GetPushDataBatchRsp.DataEntry
	20, // 8: pb.GetPusherBatchRsp.data:type_name -> pb.GetPusherBatchRsp.DataEntry
	16, // 9: pb.SyncProcessRsp.Rooms.join:type_name -> pb.SyncProcessRsp.Rooms.JoinEntry
	17, // 10: pb.SyncProcessRsp.Rooms.invite:type_name -> pb.SyncProcessRsp.Rooms.InviteEntry
	18, // 11: pb.SyncProcessRsp.Rooms.leave:type_name -> pb.SyncProcessRsp.Rooms.LeaveEntry
	23, // 12: pb.SyncProcessRsp.Rooms.JoinEntry.value:type_name -> pb.JoinResponse
	24, // 13: pb.SyncProcessRsp.Rooms.InviteEntry.value:type_name -> pb.InviteResponse
	25, // 14: pb.SyncProcessRsp.Rooms.LeaveEntry.value:type_name -> pb.LeaveResponse
	6,  // 15: pb.GetPushDataBatchRsp.DataEntry.value:type_name -> pb.RespPushData
	21, // 16: pb.GetPusherBatchRsp.DataEntry.value:type_name -> pb.Pushers
	1,  // 17: pb.SyncServer.SyncLoad:input_type -> pb.SyncProcessReq
	1,  // 18: pb.SyncServer.SyncProcess:input_type -> pb.SyncProcessReq
	3,  // 19: pb.SyncServer.GetPusherByDevice:input_type -> pb.GetPusherByDeviceReq
	4,  // 20: pb.SyncServer.GetPushRuleByUser:input_type -> pb.GetPusherRuleByUserReq
	5,  // 21: pb.SyncServer.GetPushDataBatch:input_type -> pb.GetPushDataBatchReq
	8,  // 22: pb.SyncServer.GetPusherBatch:input_type -> pb.GetPusherBatchReq
	10, // 23: pb.SyncServer.OnReceipt:input_type -> pb.OnReceiptReq
	11, // 24: pb.SyncServer.OnTyping:input_type -> pb.OnTypingReq
	12, // 25: pb.SyncServer.OnUnread:input_type -> pb.OnUnreadReq
	2,  // 26: pb.SyncServer.SyncLoad:output_type -> pb.SyncProcessRsp
	2,  // 27: pb.SyncServer.SyncProcess:output_type -> pb.SyncProcessRsp
	21, // 28: pb.SyncServer.GetPusherByDevice:output_type -> pb.Pushers
	22, // 29: pb.SyncServer.GetPushRuleByUser:output_type -> pb.Rules
	7,  // 30: pb.SyncServer.GetPushDataBatch:output_type -> pb.GetPushDataBatchRsp
	9,  // 31: pb.SyncServer.GetPusherBatch:output_type -> pb.GetPusherBatchRsp
	26, // 32: pb.SyncServer.OnReceipt:output_type -> pb.Empty
	26, // 33: pb.SyncServer.OnTyping:output_type -> pb.Empty
	13, // 34: pb.SyncServer.OnUnread:output_type -> pb.OnUnreadRsp
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_syncserver_proto_init() }
func file_syncserver_proto_init() {
	if File_syncserver_proto != nil {
		return
	}
	file_common_proto_init()
	file_sync_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_syncserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProcessRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPusherByDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPusherRuleByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPushDataBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespPushData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPushDataBatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPusherBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPusherBatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnReceiptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnTypingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnUnreadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnUnreadRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syncserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncProcessRsp_Rooms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syncserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_syncserver_proto_goTypes,
		DependencyIndexes: file_syncserver_proto_depIdxs,
		MessageInfos:      file_syncserver_proto_msgTypes,
	}.Build()
	File_syncserver_proto = out.File
	file_syncserver_proto_rawDesc = nil
	file_syncserver_proto_goTypes = nil
	file_syncserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SyncServerClient is the client API for SyncServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncServerClient interface {
	SyncLoad(ctx context.Context, in *SyncProcessReq, opts ...grpc.CallOption) (*SyncProcessRsp, error)
	SyncProcess(ctx context.Context, in *SyncProcessReq, opts ...grpc.CallOption) (*SyncProcessRsp, error)
	GetPusherByDevice(ctx context.Context, in *GetPusherByDeviceReq, opts ...grpc.CallOption) (*Pushers, error)
	GetPushRuleByUser(ctx context.Context, in *GetPusherRuleByUserReq, opts ...grpc.CallOption) (*Rules, error)
	GetPushDataBatch(ctx context.Context, in *GetPushDataBatchReq, opts ...grpc.CallOption) (*GetPushDataBatchRsp, error)
	GetPusherBatch(ctx context.Context, in *GetPusherBatchReq, opts ...grpc.CallOption) (*GetPusherBatchRsp, error)
	OnReceipt(ctx context.Context, in *OnReceiptReq, opts ...grpc.CallOption) (*Empty, error)
	OnTyping(ctx context.Context, in *OnTypingReq, opts ...grpc.CallOption) (*Empty, error)
	OnUnread(ctx context.Context, in *OnUnreadReq, opts ...grpc.CallOption) (*OnUnreadRsp, error)
}

type syncServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServerClient(cc grpc.ClientConnInterface) SyncServerClient {
	return &syncServerClient{cc}
}

func (c *syncServerClient) SyncLoad(ctx context.Context, in *SyncProcessReq, opts ...grpc.CallOption) (*SyncProcessRsp, error) {
	out := new(SyncProcessRsp)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/SyncLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) SyncProcess(ctx context.Context, in *SyncProcessReq, opts ...grpc.CallOption) (*SyncProcessRsp, error) {
	out := new(SyncProcessRsp)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/SyncProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) GetPusherByDevice(ctx context.Context, in *GetPusherByDeviceReq, opts ...grpc.CallOption) (*Pushers, error) {
	out := new(Pushers)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/GetPusherByDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) GetPushRuleByUser(ctx context.Context, in *GetPusherRuleByUserReq, opts ...grpc.CallOption) (*Rules, error) {
	out := new(Rules)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/GetPushRuleByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) GetPushDataBatch(ctx context.Context, in *GetPushDataBatchReq, opts ...grpc.CallOption) (*GetPushDataBatchRsp, error) {
	out := new(GetPushDataBatchRsp)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/GetPushDataBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) GetPusherBatch(ctx context.Context, in *GetPusherBatchReq, opts ...grpc.CallOption) (*GetPusherBatchRsp, error) {
	out := new(GetPusherBatchRsp)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/GetPusherBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) OnReceipt(ctx context.Context, in *OnReceiptReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/OnReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) OnTyping(ctx context.Context, in *OnTypingReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/OnTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServerClient) OnUnread(ctx context.Context, in *OnUnreadReq, opts ...grpc.CallOption) (*OnUnreadRsp, error) {
	out := new(OnUnreadRsp)
	err := c.cc.Invoke(ctx, "/pb.SyncServer/OnUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServerServer is the server API for SyncServer service.
type SyncServerServer interface {
	SyncLoad(context.Context, *SyncProcessReq) (*SyncProcessRsp, error)
	SyncProcess(context.Context, *SyncProcessReq) (*SyncProcessRsp, error)
	GetPusherByDevice(context.Context, *GetPusherByDeviceReq) (*Pushers, error)
	GetPushRuleByUser(context.Context, *GetPusherRuleByUserReq) (*Rules, error)
	GetPushDataBatch(context.Context, *GetPushDataBatchReq) (*GetPushDataBatchRsp, error)
	GetPusherBatch(context.Context, *GetPusherBatchReq) (*GetPusherBatchRsp, error)
	OnReceipt(context.Context, *OnReceiptReq) (*Empty, error)
	OnTyping(context.Context, *OnTypingReq) (*Empty, error)
	OnUnread(context.Context, *OnUnreadReq) (*OnUnreadRsp, error)
}

// UnimplementedSyncServerServer can be embedded to have forward compatible implementations.
type UnimplementedSyncServerServer struct {
}

func (*UnimplementedSyncServerServer) SyncLoad(context.Context, *SyncProcessReq) (*SyncProcessRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncLoad not implemented")
}
func (*UnimplementedSyncServerServer) SyncProcess(context.Context, *SyncProcessReq) (*SyncProcessRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProcess not implemented")
}
func (*UnimplementedSyncServerServer) GetPusherByDevice(context.Context, *GetPusherByDeviceReq) (*Pushers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPusherByDevice not implemented")
}
func (*UnimplementedSyncServerServer) GetPushRuleByUser(context.Context, *GetPusherRuleByUserReq) (*Rules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushRuleByUser not implemented")
}
func (*UnimplementedSyncServerServer) GetPushDataBatch(context.Context, *GetPushDataBatchReq) (*GetPushDataBatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushDataBatch not implemented")
}
func (*UnimplementedSyncServerServer) GetPusherBatch(context.Context, *GetPusherBatchReq) (*GetPusherBatchRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPusherBatch not implemented")
}
func (*UnimplementedSyncServerServer) OnReceipt(context.Context, *OnReceiptReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnReceipt not implemented")
}
func (*UnimplementedSyncServerServer) OnTyping(context.Context, *OnTypingReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTyping not implemented")
}
func (*UnimplementedSyncServerServer) OnUnread(context.Context, *OnUnreadReq) (*OnUnreadRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUnread not implemented")
}

func RegisterSyncServerServer(s *grpc.Server, srv SyncServerServer) {
	s.RegisterService(&_SyncServer_serviceDesc, srv)
}

func _SyncServer_SyncLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).SyncLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/SyncLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).SyncLoad(ctx, req.(*SyncProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_SyncProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).SyncProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/SyncProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).SyncProcess(ctx, req.(*SyncProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_GetPusherByDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPusherByDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).GetPusherByDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/GetPusherByDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).GetPusherByDevice(ctx, req.(*GetPusherByDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_GetPushRuleByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPusherRuleByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).GetPushRuleByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/GetPushRuleByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).GetPushRuleByUser(ctx, req.(*GetPusherRuleByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_GetPushDataBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPushDataBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).GetPushDataBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/GetPushDataBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).GetPushDataBatch(ctx, req.(*GetPushDataBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_GetPusherBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPusherBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).GetPusherBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/GetPusherBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).GetPusherBatch(ctx, req.(*GetPusherBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_OnReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnReceiptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).OnReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/OnReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).OnReceipt(ctx, req.(*OnReceiptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_OnTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnTypingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).OnTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/OnTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).OnTyping(ctx, req.(*OnTypingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncServer_OnUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnUnreadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServerServer).OnUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SyncServer/OnUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServerServer).OnUnread(ctx, req.(*OnUnreadReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SyncServer",
	HandlerType: (*SyncServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncLoad",
			Handler:    _SyncServer_SyncLoad_Handler,
		},
		{
			MethodName: "SyncProcess",
			Handler:    _SyncServer_SyncProcess_Handler,
		},
		{
			MethodName: "GetPusherByDevice",
			Handler:    _SyncServer_GetPusherByDevice_Handler,
		},
		{
			MethodName: "GetPushRuleByUser",
			Handler:    _SyncServer_GetPushRuleByUser_Handler,
		},
		{
			MethodName: "GetPushDataBatch",
			Handler:    _SyncServer_GetPushDataBatch_Handler,
		},
		{
			MethodName: "GetPusherBatch",
			Handler:    _SyncServer_GetPusherBatch_Handler,
		},
		{
			MethodName: "OnReceipt",
			Handler:    _SyncServer_OnReceipt_Handler,
		},
		{
			MethodName: "OnTyping",
			Handler:    _SyncServer_OnTyping_Handler,
		},
		{
			MethodName: "OnUnread",
			Handler:    _SyncServer_OnUnread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syncserver.proto",
}
