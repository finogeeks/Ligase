// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: publicroom.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryPublicRoomStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Since  string `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *QueryPublicRoomStateReq) Reset() {
	*x = QueryPublicRoomStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicroom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublicRoomStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublicRoomStateReq) ProtoMessage() {}

func (x *QueryPublicRoomStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_publicroom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublicRoomStateReq.ProtoReflect.Descriptor instead.
func (*QueryPublicRoomStateReq) Descriptor() ([]byte, []int) {
	return file_publicroom_proto_rawDescGZIP(), []int{0}
}

func (x *QueryPublicRoomStateReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *QueryPublicRoomStateReq) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *QueryPublicRoomStateReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type PublicRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomID           string   `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	Aliases          []string `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	CanonicalAlias   string   `protobuf:"bytes,3,opt,name=canonicalAlias,proto3" json:"canonicalAlias,omitempty"`
	Name             string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Topic            string   `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	AvatarURL        string   `protobuf:"bytes,6,opt,name=avatarURL,proto3" json:"avatarURL,omitempty"`
	NumJoinedMembers int64    `protobuf:"varint,7,opt,name=numJoinedMembers,proto3" json:"numJoinedMembers,omitempty"`
	WorldReadable    bool     `protobuf:"varint,8,opt,name=worldReadable,proto3" json:"worldReadable,omitempty"`
	GuestCanJoin     bool     `protobuf:"varint,9,opt,name=guestCanJoin,proto3" json:"guestCanJoin,omitempty"`
}

func (x *PublicRoomState) Reset() {
	*x = PublicRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicroom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicRoomState) ProtoMessage() {}

func (x *PublicRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_publicroom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicRoomState.ProtoReflect.Descriptor instead.
func (*PublicRoomState) Descriptor() ([]byte, []int) {
	return file_publicroom_proto_rawDescGZIP(), []int{1}
}

func (x *PublicRoomState) GetRoomID() string {
	if x != nil {
		return x.RoomID
	}
	return ""
}

func (x *PublicRoomState) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *PublicRoomState) GetCanonicalAlias() string {
	if x != nil {
		return x.CanonicalAlias
	}
	return ""
}

func (x *PublicRoomState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicRoomState) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublicRoomState) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

func (x *PublicRoomState) GetNumJoinedMembers() int64 {
	if x != nil {
		return x.NumJoinedMembers
	}
	return 0
}

func (x *PublicRoomState) GetWorldReadable() bool {
	if x != nil {
		return x.WorldReadable
	}
	return false
}

func (x *PublicRoomState) GetGuestCanJoin() bool {
	if x != nil {
		return x.GuestCanJoin
	}
	return false
}

type QueryPublicRoomStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk     []*PublicRoomState `protobuf:"bytes,1,rep,name=chunk,proto3" json:"chunk,omitempty"`
	NextBatch string             `protobuf:"bytes,2,opt,name=nextBatch,proto3" json:"nextBatch,omitempty"`
	PrevBatch string             `protobuf:"bytes,3,opt,name=prevBatch,proto3" json:"prevBatch,omitempty"`
	Estimate  int64              `protobuf:"varint,4,opt,name=estimate,proto3" json:"estimate,omitempty"`
}

func (x *QueryPublicRoomStateRsp) Reset() {
	*x = QueryPublicRoomStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicroom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPublicRoomStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPublicRoomStateRsp) ProtoMessage() {}

func (x *QueryPublicRoomStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_publicroom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPublicRoomStateRsp.ProtoReflect.Descriptor instead.
func (*QueryPublicRoomStateRsp) Descriptor() ([]byte, []int) {
	return file_publicroom_proto_rawDescGZIP(), []int{2}
}

func (x *QueryPublicRoomStateRsp) GetChunk() []*PublicRoomState {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *QueryPublicRoomStateRsp) GetNextBatch() string {
	if x != nil {
		return x.NextBatch
	}
	return ""
}

func (x *QueryPublicRoomStateRsp) GetPrevBatch() string {
	if x != nil {
		return x.PrevBatch
	}
	return ""
}

func (x *QueryPublicRoomStateRsp) GetEstimate() int64 {
	if x != nil {
		return x.Estimate
	}
	return 0
}

var File_publicroom_proto protoreflect.FileDescriptor

var file_publicroom_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x5d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x6e,
	0x75, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x4a, 0x6f, 0x69,
	0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x32, 0x60, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x52,
	0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_publicroom_proto_rawDescOnce sync.Once
	file_publicroom_proto_rawDescData = file_publicroom_proto_rawDesc
)

func file_publicroom_proto_rawDescGZIP() []byte {
	file_publicroom_proto_rawDescOnce.Do(func() {
		file_publicroom_proto_rawDescData = protoimpl.X.CompressGZIP(file_publicroom_proto_rawDescData)
	})
	return file_publicroom_proto_rawDescData
}

var file_publicroom_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_publicroom_proto_goTypes = []interface{}{
	(*QueryPublicRoomStateReq)(nil), // 0: pb.QueryPublicRoomStateReq
	(*PublicRoomState)(nil),         // 1: pb.PublicRoomState
	(*QueryPublicRoomStateRsp)(nil), // 2: pb.QueryPublicRoomStateRsp
}
var file_publicroom_proto_depIdxs = []int32{
	1, // 0: pb.QueryPublicRoomStateRsp.chunk:type_name -> pb.PublicRoomState
	0, // 1: pb.PublicRoom.QueryPublicRoomState:input_type -> pb.QueryPublicRoomStateReq
	2, // 2: pb.PublicRoom.QueryPublicRoomState:output_type -> pb.QueryPublicRoomStateRsp
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_publicroom_proto_init() }
func file_publicroom_proto_init() {
	if File_publicroom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_publicroom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublicRoomStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicroom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicroom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPublicRoomStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_publicroom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_publicroom_proto_goTypes,
		DependencyIndexes: file_publicroom_proto_depIdxs,
		MessageInfos:      file_publicroom_proto_msgTypes,
	}.Build()
	File_publicroom_proto = out.File
	file_publicroom_proto_rawDesc = nil
	file_publicroom_proto_goTypes = nil
	file_publicroom_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublicRoomClient is the client API for PublicRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicRoomClient interface {
	QueryPublicRoomState(ctx context.Context, in *QueryPublicRoomStateReq, opts ...grpc.CallOption) (*QueryPublicRoomStateRsp, error)
}

type publicRoomClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicRoomClient(cc grpc.ClientConnInterface) PublicRoomClient {
	return &publicRoomClient{cc}
}

func (c *publicRoomClient) QueryPublicRoomState(ctx context.Context, in *QueryPublicRoomStateReq, opts ...grpc.CallOption) (*QueryPublicRoomStateRsp, error) {
	out := new(QueryPublicRoomStateRsp)
	err := c.cc.Invoke(ctx, "/pb.PublicRoom/QueryPublicRoomState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicRoomServer is the server API for PublicRoom service.
type PublicRoomServer interface {
	QueryPublicRoomState(context.Context, *QueryPublicRoomStateReq) (*QueryPublicRoomStateRsp, error)
}

// UnimplementedPublicRoomServer can be embedded to have forward compatible implementations.
type UnimplementedPublicRoomServer struct {
}

func (*UnimplementedPublicRoomServer) QueryPublicRoomState(context.Context, *QueryPublicRoomStateReq) (*QueryPublicRoomStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPublicRoomState not implemented")
}

func RegisterPublicRoomServer(s *grpc.Server, srv PublicRoomServer) {
	s.RegisterService(&_PublicRoom_serviceDesc, srv)
}

func _PublicRoom_QueryPublicRoomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPublicRoomStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicRoomServer).QueryPublicRoomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PublicRoom/QueryPublicRoomState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicRoomServer).QueryPublicRoomState(ctx, req.(*QueryPublicRoomStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicRoom_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PublicRoom",
	HandlerType: (*PublicRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPublicRoomState",
			Handler:    _PublicRoom_QueryPublicRoomState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicroom.proto",
}
