// Copyright (C) 2020 Finogeeks Co., Ltd
//
// This program is free software: you can redistribute it and/or  modify
// it under the terms of the GNU Affero General Public License, version 3,
// as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by capnpc-go. DO NOT EDIT.

package internals

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type DeviceCapn struct{ capnp.Struct }

// DeviceCapn_TypeID is the unique identifier for the type DeviceCapn.
const DeviceCapn_TypeID = 0xa8785d0d098fe93f

func NewDeviceCapn(s *capnp.Segment) (DeviceCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 5})
	return DeviceCapn{st}, err
}

func NewRootDeviceCapn(s *capnp.Segment) (DeviceCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 5})
	return DeviceCapn{st}, err
}

func ReadRootDeviceCapn(msg *capnp.Message) (DeviceCapn, error) {
	root, err := msg.RootPtr()
	return DeviceCapn{root.Struct()}, err
}

func (s DeviceCapn) String() string {
	str, _ := text.Marshal(0xa8785d0d098fe93f, s.Struct)
	return str
}

func (s DeviceCapn) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DeviceCapn) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DeviceCapn) UserID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DeviceCapn) HasUserID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) UserIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetUserID(v string) error {
	return s.Struct.SetText(1, v)
}

func (s DeviceCapn) DisplayName() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s DeviceCapn) HasDisplayName() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) DisplayNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetDisplayName(v string) error {
	return s.Struct.SetText(2, v)
}

func (s DeviceCapn) DeviceType() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s DeviceCapn) HasDeviceType() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) DeviceTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetDeviceType(v string) error {
	return s.Struct.SetText(3, v)
}

func (s DeviceCapn) IsHuman() bool {
	return s.Struct.Bit(0)
}

func (s DeviceCapn) SetIsHuman(v bool) {
	s.Struct.SetBit(0, v)
}

func (s DeviceCapn) Identifier() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s DeviceCapn) HasIdentifier() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) IdentifierBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetIdentifier(v string) error {
	return s.Struct.SetText(4, v)
}

func (s DeviceCapn) CreateTs() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s DeviceCapn) SetCreateTs(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s DeviceCapn) LastActiveTs() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s DeviceCapn) SetLastActiveTs(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// DeviceCapn_List is a list of DeviceCapn.
type DeviceCapn_List struct{ capnp.List }

// NewDeviceCapn creates a new list of DeviceCapn.
func NewDeviceCapn_List(s *capnp.Segment, sz int32) (DeviceCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 5}, sz)
	return DeviceCapn_List{l}, err
}

func (s DeviceCapn_List) At(i int) DeviceCapn { return DeviceCapn{s.List.Struct(i)} }

func (s DeviceCapn_List) Set(i int, v DeviceCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s DeviceCapn_List) String() string {
	str, _ := text.MarshalList(0xa8785d0d098fe93f, s.List)
	return str
}

// DeviceCapn_Promise is a wrapper for a DeviceCapn promised by a client call.
type DeviceCapn_Promise struct{ *capnp.Pipeline }

func (p DeviceCapn_Promise) Struct() (DeviceCapn, error) {
	s, err := p.Pipeline.Struct()
	return DeviceCapn{s}, err
}

type InputMsgCapn struct{ capnp.Struct }

// InputMsgCapn_TypeID is the unique identifier for the type InputMsgCapn.
const InputMsgCapn_TypeID = 0xa87a004f4cc80d69

func NewInputMsgCapn(s *capnp.Segment) (InputMsgCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return InputMsgCapn{st}, err
}

func NewRootInputMsgCapn(s *capnp.Segment) (InputMsgCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return InputMsgCapn{st}, err
}

func ReadRootInputMsgCapn(msg *capnp.Message) (InputMsgCapn, error) {
	root, err := msg.RootPtr()
	return InputMsgCapn{root.Struct()}, err
}

func (s InputMsgCapn) String() string {
	str, _ := text.Marshal(0xa87a004f4cc80d69, s.Struct)
	return str
}

func (s InputMsgCapn) MsgType() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s InputMsgCapn) SetMsgType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s InputMsgCapn) Device() (DeviceCapn, error) {
	p, err := s.Struct.Ptr(0)
	return DeviceCapn{Struct: p.Struct()}, err
}

func (s InputMsgCapn) HasDevice() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s InputMsgCapn) SetDevice(v DeviceCapn) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDevice sets the device field to a newly
// allocated DeviceCapn struct, preferring placement in s's segment.
func (s InputMsgCapn) NewDevice() (DeviceCapn, error) {
	ss, err := NewDeviceCapn(s.Struct.Segment())
	if err != nil {
		return DeviceCapn{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s InputMsgCapn) Payload() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s InputMsgCapn) HasPayload() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s InputMsgCapn) SetPayload(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s InputMsgCapn) Reply() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s InputMsgCapn) SetReply(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// InputMsgCapn_List is a list of InputMsgCapn.
type InputMsgCapn_List struct{ capnp.List }

// NewInputMsgCapn creates a new list of InputMsgCapn.
func NewInputMsgCapn_List(s *capnp.Segment, sz int32) (InputMsgCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return InputMsgCapn_List{l}, err
}

func (s InputMsgCapn_List) At(i int) InputMsgCapn { return InputMsgCapn{s.List.Struct(i)} }

func (s InputMsgCapn_List) Set(i int, v InputMsgCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s InputMsgCapn_List) String() string {
	str, _ := text.MarshalList(0xa87a004f4cc80d69, s.List)
	return str
}

// InputMsgCapn_Promise is a wrapper for a InputMsgCapn promised by a client call.
type InputMsgCapn_Promise struct{ *capnp.Pipeline }

func (p InputMsgCapn_Promise) Struct() (InputMsgCapn, error) {
	s, err := p.Pipeline.Struct()
	return InputMsgCapn{s}, err
}

func (p InputMsgCapn_Promise) Device() DeviceCapn_Promise {
	return DeviceCapn_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type OutputMsgCapn struct{ capnp.Struct }

// OutputMsgCapn_TypeID is the unique identifier for the type OutputMsgCapn.
const OutputMsgCapn_TypeID = 0x909a87a85b9a186d

func NewOutputMsgCapn(s *capnp.Segment) (OutputMsgCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return OutputMsgCapn{st}, err
}

func NewRootOutputMsgCapn(s *capnp.Segment) (OutputMsgCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return OutputMsgCapn{st}, err
}

func ReadRootOutputMsgCapn(msg *capnp.Message) (OutputMsgCapn, error) {
	root, err := msg.RootPtr()
	return OutputMsgCapn{root.Struct()}, err
}

func (s OutputMsgCapn) String() string {
	str, _ := text.Marshal(0x909a87a85b9a186d, s.Struct)
	return str
}

func (s OutputMsgCapn) MsgType() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s OutputMsgCapn) SetMsgType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s OutputMsgCapn) Code() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s OutputMsgCapn) SetCode(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s OutputMsgCapn) Headers() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s OutputMsgCapn) HasHeaders() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OutputMsgCapn) SetHeaders(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s OutputMsgCapn) Body() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s OutputMsgCapn) HasBody() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OutputMsgCapn) SetBody(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s OutputMsgCapn) BodyFormat() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s OutputMsgCapn) SetBodyFormat(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s OutputMsgCapn) Reply() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s OutputMsgCapn) SetReply(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

// OutputMsgCapn_List is a list of OutputMsgCapn.
type OutputMsgCapn_List struct{ capnp.List }

// NewOutputMsgCapn creates a new list of OutputMsgCapn.
func NewOutputMsgCapn_List(s *capnp.Segment, sz int32) (OutputMsgCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return OutputMsgCapn_List{l}, err
}

func (s OutputMsgCapn_List) At(i int) OutputMsgCapn { return OutputMsgCapn{s.List.Struct(i)} }

func (s OutputMsgCapn_List) Set(i int, v OutputMsgCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s OutputMsgCapn_List) String() string {
	str, _ := text.MarshalList(0x909a87a85b9a186d, s.List)
	return str
}

// OutputMsgCapn_Promise is a wrapper for a OutputMsgCapn promised by a client call.
type OutputMsgCapn_Promise struct{ *capnp.Pipeline }

func (p OutputMsgCapn_Promise) Struct() (OutputMsgCapn, error) {
	s, err := p.Pipeline.Struct()
	return OutputMsgCapn{s}, err
}

const schema_c5519b9e71d66d17 = "x\xdal\x93Kh\x13_\x14\xc6\xbf\xef\xde\x99\xe6\xff" +
	"/\x0d\xe9\x90\x80E\x14u\xe1FP\xd4\xee\xba\x89\x8f" +
	"\"V\xac\xf5hD\xf0\x01N3c;\x92I\xa6\x99" +
	"I1n\xb2t\xa9\x0b\x17Z\x1fTP\x88\xd2\x8d\xe0" +
	"B\\\x0a\xa2\x0b\x17\xbaP*\x08*\x14\xa4P\xc1\x85" +
	"\x82\x0b%r\x8dI\xebc7\xe7\xf0\x9d\x81\xdf\x8f\xef" +
	"nM\xb8Cm\xb3+\x0a\x905vO+\x1c\x989" +
	"\xde<?s\x11\xd2K\xab\xb5*|5u\xe3\xaa<" +
	"\x86\xadR@v-\x1fe72\x05\x0cn\xe0Q\x82" +
	"\xad\xfc\xe2\x85\xff\xd3'\xcf6MZ\xafH\xdb&=" +
	"\xa5\xeef\xeb\xe6n\xb0\xa6\x9e\x10|\x1b\xa4\x9f\xee\x1f" +
	";\xd7\x94^\xaa?\xff<j=\xcc\x1e\xb1\xcc\x97X" +
	"\x1f\xb0\xb9\x15\xc6\x13[\x8anTV\xd1\xd0X-\x89" +
	"j\xc9h<\xb1\xdb\x8d\xca8H\xca\x80\xb6\x00\x8b\x80" +
	"se\x17 \x974eV\xd1!s4\xcb\xeb\x9b\x00" +
	"\xb9\xac)\xb7\x14\xa9rT\x80s\xd3\x04\xafiJS" +
	"\xd1\xd1\xccQ\x03\xcem\x13\x9c\xd5\x949E\xc7R9" +
	"Z\x80s\xe7\x18 MM\xb9\xaf\xe8\xd8:G\x1bp" +
	"\xeem\x07dNS\x1e(6\xc2x\xa2P\x8f|Z" +
	"P\xb4\xc0L\xb1\xe2\xf9\xb4\xa1h\x83\x8dI\xdf\xf5\xfc" +
	"j\xcc4\x14\xd3`f\xbc\xe2\xd5;C\xcb\x0c{*" +
	"\xd5\x10\xdaM:\x17\xeb\xaa~T\xaaw\xa6.8\xa3" +
	"\xa1a\x7f:(\xfa\x19\x83m\xa8\xd7w\xa9_\xac\x06" +
	"\xe4\x99\xa6\xcc\xaf\xa0~9\x04\xc8sMy\xa3\xe8\xa8" +
	"_\xd8\xaf\xc7\x01\x99\xd7\x94\x05\x83\xad\xdb\xd8\xef\x0d\xe1" +
	";MYR\xa4\xd5\xa6^4~\x164\xe5\x93\xa1\xb6" +
	"\xda\xd4\x1fMpIS\xbe*:=\xcc\xb1\x07p\xbe" +
	"\xec\x03\xe4\xb3\xe6!*:)\x953up\xbe\x9f\x01" +
	"\xe4\x9b\xe6\xe1\xff\xa8\xa8\x03\x8f}P\xec\x03\xf3\xb5\xd8" +
	"\xaf\x8e\x0cw\xc6\x96\x17\xc4Q\xc9\xad\x1f@\xca\x0d\xfd" +
	"\xe5\xedO\xd0B\x1d:\xea.\x1bA\xbc\xb7\x16\xbae" +
	"\x12\x8a\xa6j\x81\xe7\x97\x93\xe0t\x00\xedW\xbb\x97\xc5" +
	"\xaa\xef&~!\x06\xd05Xr\xe3dg1\x09\x90" +
	"\x99\xf6\x0b\xf1\xbf\xc4\x8e\x94M\xa1\xf2\xedF\x19\xb5\xfd" +
	"]\xb5\xae\xf1pBS&\x15;f}c\xf6\x94\xa6" +
	"\x94\x8cY\xb6\xcd\x06&\xe8iJ\xb4\xa2P\xa1\xa9\xc9" +
	"\xa4\xa6$\x7f\xd7$\xdf\xa6d\xff\xf2\xa3\x01\xd9\x0f6" +
	"\"\xb7^\xaa\xb8^\xa7%\xbf\x17\xe2G\x00\x00\x00\xff" +
	"\xffcs\xc2\x87"

func init() {
	schemas.Register(schema_c5519b9e71d66d17,
		0x909a87a85b9a186d,
		0xa8785d0d098fe93f,
		0xa87a004f4cc80d69)
}
