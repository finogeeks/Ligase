// Copyright (C) 2020 Finogeeks Co., Ltd
//
// This program is free software: you can redistribute it and/or  modify
// it under the terms of the GNU Affero General Public License, version 3,
// as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by capnpc-go. DO NOT EDIT.

package external

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type DelDeviceRequestCapn struct{ capnp.Struct }

// DelDeviceRequestCapn_TypeID is the unique identifier for the type DelDeviceRequestCapn.
const DelDeviceRequestCapn_TypeID = 0xcb0e6b8da42d98b7

func NewDelDeviceRequestCapn(s *capnp.Segment) (DelDeviceRequestCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DelDeviceRequestCapn{st}, err
}

func NewRootDelDeviceRequestCapn(s *capnp.Segment) (DelDeviceRequestCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return DelDeviceRequestCapn{st}, err
}

func ReadRootDelDeviceRequestCapn(msg *capnp.Message) (DelDeviceRequestCapn, error) {
	root, err := msg.RootPtr()
	return DelDeviceRequestCapn{root.Struct()}, err
}

func (s DelDeviceRequestCapn) String() string {
	str, _ := text.Marshal(0xcb0e6b8da42d98b7, s.Struct)
	return str
}

func (s DelDeviceRequestCapn) DeviceID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DelDeviceRequestCapn) HasDeviceID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DelDeviceRequestCapn) DeviceIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DelDeviceRequestCapn) SetDeviceID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DelDeviceRequestCapn) Auth() (DeviceAuthDictCapn, error) {
	p, err := s.Struct.Ptr(1)
	return DeviceAuthDictCapn{Struct: p.Struct()}, err
}

func (s DelDeviceRequestCapn) HasAuth() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DelDeviceRequestCapn) SetAuth(v DeviceAuthDictCapn) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated DeviceAuthDictCapn struct, preferring placement in s's segment.
func (s DelDeviceRequestCapn) NewAuth() (DeviceAuthDictCapn, error) {
	ss, err := NewDeviceAuthDictCapn(s.Struct.Segment())
	if err != nil {
		return DeviceAuthDictCapn{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// DelDeviceRequestCapn_List is a list of DelDeviceRequestCapn.
type DelDeviceRequestCapn_List struct{ capnp.List }

// NewDelDeviceRequestCapn creates a new list of DelDeviceRequestCapn.
func NewDelDeviceRequestCapn_List(s *capnp.Segment, sz int32) (DelDeviceRequestCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return DelDeviceRequestCapn_List{l}, err
}

func (s DelDeviceRequestCapn_List) At(i int) DelDeviceRequestCapn {
	return DelDeviceRequestCapn{s.List.Struct(i)}
}

func (s DelDeviceRequestCapn_List) Set(i int, v DelDeviceRequestCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DelDeviceRequestCapn_List) String() string {
	str, _ := text.MarshalList(0xcb0e6b8da42d98b7, s.List)
	return str
}

// DelDeviceRequestCapn_Promise is a wrapper for a DelDeviceRequestCapn promised by a client call.
type DelDeviceRequestCapn_Promise struct{ *capnp.Pipeline }

func (p DelDeviceRequestCapn_Promise) Struct() (DelDeviceRequestCapn, error) {
	s, err := p.Pipeline.Struct()
	return DelDeviceRequestCapn{s}, err
}

func (p DelDeviceRequestCapn_Promise) Auth() DeviceAuthDictCapn_Promise {
	return DeviceAuthDictCapn_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type DeviceCapn struct{ capnp.Struct }

// DeviceCapn_TypeID is the unique identifier for the type DeviceCapn.
const DeviceCapn_TypeID = 0xf882edf00b3cf3b7

func NewDeviceCapn(s *capnp.Segment) (DeviceCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return DeviceCapn{st}, err
}

func NewRootDeviceCapn(s *capnp.Segment) (DeviceCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return DeviceCapn{st}, err
}

func ReadRootDeviceCapn(msg *capnp.Message) (DeviceCapn, error) {
	root, err := msg.RootPtr()
	return DeviceCapn{root.Struct()}, err
}

func (s DeviceCapn) String() string {
	str, _ := text.Marshal(0xf882edf00b3cf3b7, s.Struct)
	return str
}

func (s DeviceCapn) DeviceID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DeviceCapn) HasDeviceID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) DeviceIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetDeviceID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DeviceCapn) DisplayName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DeviceCapn) HasDisplayName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) DisplayNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetDisplayName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s DeviceCapn) LastSeenIP() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s DeviceCapn) HasLastSeenIP() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) LastSeenIPBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetLastSeenIP(v string) error {
	return s.Struct.SetText(2, v)
}

func (s DeviceCapn) LastSeenTs() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s DeviceCapn) SetLastSeenTs(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s DeviceCapn) UserID() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s DeviceCapn) HasUserID() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s DeviceCapn) UserIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s DeviceCapn) SetUserID(v string) error {
	return s.Struct.SetText(3, v)
}

// DeviceCapn_List is a list of DeviceCapn.
type DeviceCapn_List struct{ capnp.List }

// NewDeviceCapn creates a new list of DeviceCapn.
func NewDeviceCapn_List(s *capnp.Segment, sz int32) (DeviceCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return DeviceCapn_List{l}, err
}

func (s DeviceCapn_List) At(i int) DeviceCapn { return DeviceCapn{s.List.Struct(i)} }

func (s DeviceCapn_List) Set(i int, v DeviceCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s DeviceCapn_List) String() string {
	str, _ := text.MarshalList(0xf882edf00b3cf3b7, s.List)
	return str
}

// DeviceCapn_Promise is a wrapper for a DeviceCapn promised by a client call.
type DeviceCapn_Promise struct{ *capnp.Pipeline }

func (p DeviceCapn_Promise) Struct() (DeviceCapn, error) {
	s, err := p.Pipeline.Struct()
	return DeviceCapn{s}, err
}

type DeviceAuthDictCapn struct{ capnp.Struct }

// DeviceAuthDictCapn_TypeID is the unique identifier for the type DeviceAuthDictCapn.
const DeviceAuthDictCapn_TypeID = 0xb7628e8135d9844e

func NewDeviceAuthDictCapn(s *capnp.Segment) (DeviceAuthDictCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return DeviceAuthDictCapn{st}, err
}

func NewRootDeviceAuthDictCapn(s *capnp.Segment) (DeviceAuthDictCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return DeviceAuthDictCapn{st}, err
}

func ReadRootDeviceAuthDictCapn(msg *capnp.Message) (DeviceAuthDictCapn, error) {
	root, err := msg.RootPtr()
	return DeviceAuthDictCapn{root.Struct()}, err
}

func (s DeviceAuthDictCapn) String() string {
	str, _ := text.Marshal(0xb7628e8135d9844e, s.Struct)
	return str
}

func (s DeviceAuthDictCapn) Type() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DeviceAuthDictCapn) HasType() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DeviceAuthDictCapn) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DeviceAuthDictCapn) SetType(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DeviceAuthDictCapn) Session() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DeviceAuthDictCapn) HasSession() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DeviceAuthDictCapn) SessionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DeviceAuthDictCapn) SetSession(v string) error {
	return s.Struct.SetText(1, v)
}

func (s DeviceAuthDictCapn) Password() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s DeviceAuthDictCapn) HasPassword() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s DeviceAuthDictCapn) PasswordBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s DeviceAuthDictCapn) SetPassword(v string) error {
	return s.Struct.SetText(2, v)
}

func (s DeviceAuthDictCapn) User() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s DeviceAuthDictCapn) HasUser() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s DeviceAuthDictCapn) UserBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s DeviceAuthDictCapn) SetUser(v string) error {
	return s.Struct.SetText(3, v)
}

// DeviceAuthDictCapn_List is a list of DeviceAuthDictCapn.
type DeviceAuthDictCapn_List struct{ capnp.List }

// NewDeviceAuthDictCapn creates a new list of DeviceAuthDictCapn.
func NewDeviceAuthDictCapn_List(s *capnp.Segment, sz int32) (DeviceAuthDictCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return DeviceAuthDictCapn_List{l}, err
}

func (s DeviceAuthDictCapn_List) At(i int) DeviceAuthDictCapn {
	return DeviceAuthDictCapn{s.List.Struct(i)}
}

func (s DeviceAuthDictCapn_List) Set(i int, v DeviceAuthDictCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DeviceAuthDictCapn_List) String() string {
	str, _ := text.MarshalList(0xb7628e8135d9844e, s.List)
	return str
}

// DeviceAuthDictCapn_Promise is a wrapper for a DeviceAuthDictCapn promised by a client call.
type DeviceAuthDictCapn_Promise struct{ *capnp.Pipeline }

func (p DeviceAuthDictCapn_Promise) Struct() (DeviceAuthDictCapn, error) {
	s, err := p.Pipeline.Struct()
	return DeviceAuthDictCapn{s}, err
}

type DeviceListCapn struct{ capnp.Struct }

// DeviceListCapn_TypeID is the unique identifier for the type DeviceListCapn.
const DeviceListCapn_TypeID = 0x8434d739f5fd7da6

func NewDeviceListCapn(s *capnp.Segment) (DeviceListCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DeviceListCapn{st}, err
}

func NewRootDeviceListCapn(s *capnp.Segment) (DeviceListCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return DeviceListCapn{st}, err
}

func ReadRootDeviceListCapn(msg *capnp.Message) (DeviceListCapn, error) {
	root, err := msg.RootPtr()
	return DeviceListCapn{root.Struct()}, err
}

func (s DeviceListCapn) String() string {
	str, _ := text.Marshal(0x8434d739f5fd7da6, s.Struct)
	return str
}

func (s DeviceListCapn) Devices() (DeviceCapn_List, error) {
	p, err := s.Struct.Ptr(0)
	return DeviceCapn_List{List: p.List()}, err
}

func (s DeviceListCapn) HasDevices() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DeviceListCapn) SetDevices(v DeviceCapn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDevices sets the devices field to a newly
// allocated DeviceCapn_List, preferring placement in s's segment.
func (s DeviceListCapn) NewDevices(n int32) (DeviceCapn_List, error) {
	l, err := NewDeviceCapn_List(s.Struct.Segment(), n)
	if err != nil {
		return DeviceCapn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// DeviceListCapn_List is a list of DeviceListCapn.
type DeviceListCapn_List struct{ capnp.List }

// NewDeviceListCapn creates a new list of DeviceListCapn.
func NewDeviceListCapn_List(s *capnp.Segment, sz int32) (DeviceListCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return DeviceListCapn_List{l}, err
}

func (s DeviceListCapn_List) At(i int) DeviceListCapn { return DeviceListCapn{s.List.Struct(i)} }

func (s DeviceListCapn_List) Set(i int, v DeviceListCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s DeviceListCapn_List) String() string {
	str, _ := text.MarshalList(0x8434d739f5fd7da6, s.List)
	return str
}

// DeviceListCapn_Promise is a wrapper for a DeviceListCapn promised by a client call.
type DeviceListCapn_Promise struct{ *capnp.Pipeline }

func (p DeviceListCapn_Promise) Struct() (DeviceListCapn, error) {
	s, err := p.Pipeline.Struct()
	return DeviceListCapn{s}, err
}

type GetDeviceRequestCapn struct{ capnp.Struct }

// GetDeviceRequestCapn_TypeID is the unique identifier for the type GetDeviceRequestCapn.
const GetDeviceRequestCapn_TypeID = 0xb886e6d051434b84

func NewGetDeviceRequestCapn(s *capnp.Segment) (GetDeviceRequestCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetDeviceRequestCapn{st}, err
}

func NewRootGetDeviceRequestCapn(s *capnp.Segment) (GetDeviceRequestCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetDeviceRequestCapn{st}, err
}

func ReadRootGetDeviceRequestCapn(msg *capnp.Message) (GetDeviceRequestCapn, error) {
	root, err := msg.RootPtr()
	return GetDeviceRequestCapn{root.Struct()}, err
}

func (s GetDeviceRequestCapn) String() string {
	str, _ := text.Marshal(0xb886e6d051434b84, s.Struct)
	return str
}

func (s GetDeviceRequestCapn) DeviceID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetDeviceRequestCapn) HasDeviceID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GetDeviceRequestCapn) DeviceIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetDeviceRequestCapn) SetDeviceID(v string) error {
	return s.Struct.SetText(0, v)
}

// GetDeviceRequestCapn_List is a list of GetDeviceRequestCapn.
type GetDeviceRequestCapn_List struct{ capnp.List }

// NewGetDeviceRequestCapn creates a new list of GetDeviceRequestCapn.
func NewGetDeviceRequestCapn_List(s *capnp.Segment, sz int32) (GetDeviceRequestCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return GetDeviceRequestCapn_List{l}, err
}

func (s GetDeviceRequestCapn_List) At(i int) GetDeviceRequestCapn {
	return GetDeviceRequestCapn{s.List.Struct(i)}
}

func (s GetDeviceRequestCapn_List) Set(i int, v GetDeviceRequestCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetDeviceRequestCapn_List) String() string {
	str, _ := text.MarshalList(0xb886e6d051434b84, s.List)
	return str
}

// GetDeviceRequestCapn_Promise is a wrapper for a GetDeviceRequestCapn promised by a client call.
type GetDeviceRequestCapn_Promise struct{ *capnp.Pipeline }

func (p GetDeviceRequestCapn_Promise) Struct() (GetDeviceRequestCapn, error) {
	s, err := p.Pipeline.Struct()
	return GetDeviceRequestCapn{s}, err
}

type PutDeviceRequestCapn struct{ capnp.Struct }

// PutDeviceRequestCapn_TypeID is the unique identifier for the type PutDeviceRequestCapn.
const PutDeviceRequestCapn_TypeID = 0xf8ed5b72a4f56af4

func NewPutDeviceRequestCapn(s *capnp.Segment) (PutDeviceRequestCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutDeviceRequestCapn{st}, err
}

func NewRootPutDeviceRequestCapn(s *capnp.Segment) (PutDeviceRequestCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PutDeviceRequestCapn{st}, err
}

func ReadRootPutDeviceRequestCapn(msg *capnp.Message) (PutDeviceRequestCapn, error) {
	root, err := msg.RootPtr()
	return PutDeviceRequestCapn{root.Struct()}, err
}

func (s PutDeviceRequestCapn) String() string {
	str, _ := text.Marshal(0xf8ed5b72a4f56af4, s.Struct)
	return str
}

func (s PutDeviceRequestCapn) DeviceID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PutDeviceRequestCapn) HasDeviceID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PutDeviceRequestCapn) DeviceIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PutDeviceRequestCapn) SetDeviceID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PutDeviceRequestCapn) DisplayName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s PutDeviceRequestCapn) HasDisplayName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PutDeviceRequestCapn) DisplayNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s PutDeviceRequestCapn) SetDisplayName(v string) error {
	return s.Struct.SetText(1, v)
}

// PutDeviceRequestCapn_List is a list of PutDeviceRequestCapn.
type PutDeviceRequestCapn_List struct{ capnp.List }

// NewPutDeviceRequestCapn creates a new list of PutDeviceRequestCapn.
func NewPutDeviceRequestCapn_List(s *capnp.Segment, sz int32) (PutDeviceRequestCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PutDeviceRequestCapn_List{l}, err
}

func (s PutDeviceRequestCapn_List) At(i int) PutDeviceRequestCapn {
	return PutDeviceRequestCapn{s.List.Struct(i)}
}

func (s PutDeviceRequestCapn_List) Set(i int, v PutDeviceRequestCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PutDeviceRequestCapn_List) String() string {
	str, _ := text.MarshalList(0xf8ed5b72a4f56af4, s.List)
	return str
}

// PutDeviceRequestCapn_Promise is a wrapper for a PutDeviceRequestCapn promised by a client call.
type PutDeviceRequestCapn_Promise struct{ *capnp.Pipeline }

func (p PutDeviceRequestCapn_Promise) Struct() (PutDeviceRequestCapn, error) {
	s, err := p.Pipeline.Struct()
	return PutDeviceRequestCapn{s}, err
}

const schema_d3996cfefe9023b6 = "x\xda\x9c\x92OKTQ\x18\xc6\xdf\xe7\x9c\x994\x9b" +
	"t.3\x8b6\xd1\\\xa6E\x85\x85\xa2A\x8a0\x9a" +
	"\x13a\x85\xcc\x9b\xad\xfa\x03]\xc7\x0335\x8d\xa3\xe7" +
	"N&$bL\xd1\"\xc3\xa0\xc0\x16A\x0b\xa9o\x90" +
	"\xd1Wh\x13\xb8\x88\xfa\x00\xb5\x12\x8c\x12$\xc8\x1bg" +
	"\xec\x8e\xe3t]\x14\xb3\x99\xf3\xf2\xbc\xbf\xe79\xcf\xb9" +
	"\x1d\xed{\xfbEg\xf8u?\xd1\xc8\x9a\x08\xef\xf1^" +
	"\xcd\xfcZ\xef\xf9\xd8]!+\x02\xefMras\xb3" +
	"\xf0|\x85\xc2h\"\x8a\xf5$>\xc7\xce$\xcc\xbf\x81" +
	"D\x8a\xe0\x0dW>\x9d\x9c{<\xba\xdc\xa0\x0d\x19\xc5" +
	"D\xe2gl\xa6\xaa\x9dN|%x\x95\xf3\x83\xfc\xe1" +
	"\xcb\x83\xb7\x01\xdc.\xb6[\x10sl#\xbef\x1b\xf0" +
	"\xf2\xe2\xf1\xa5\xf9\x9b\xad\xef\x1b\xc4\xc2\x88\xe7\x8c\xf8I" +
	"U<oO\x19\xf1\xf7\xbe}k\xab\xf76\x88#\xf8" +
	"+\xc6\xaa\xfd.\xb6n\xc4]\xdf\xecC x?n" +
	"\xac/M^Y\xdd\x08B[\xc9\x16\xc4\xec\xa4\xd9;" +
	"\x98\x9c\"o\xc7o\xc5\x1bS\xb7\xf3Yu\"+\x9c" +
	"R\xb17]=\\\xc8kw\xd0\x91\xa5b\x06\xe0\x90" +
	"\x0c\x11\x85@d\xed?M\xc4\xcd\x12|X`vk" +
	"M\xa3\x95\x90\x91@t;0\xc1\x0c\x83\xb8\x03e7" +
	"\x97\xce\xa7\xb2\xee\xa0\xb3\xc5\x8e\xd6\xd8\xce1\"\xbe*" +
	"\xc19\x01\x0b\x88\xc3\x0c\x951\xbc.\xc1\x05\x01K\x88" +
	"8\x04\x91\x95?G\xc49\x09v\x05,)\xe3\x90D" +
	"\xd6\x84Y/H\xf0\x1d\x816w\xba\xa4\x10!\x81\x08" +
	"aV+\xad\xf3\xe3E\xff\xec\x95\x1c\xad\xa7\xc6'\xc7" +
	"\x88\xc8\x9f\xb5\x95\xb5\x9a\xac\x09\xfc\xdc\xd2\xe4>\xab\xdc" +
	"\xad\xe8\x17\xd5DY\xe9jp\xa2\x86ZL\xa0\x88\x04" +
	"\x1f\x10\xfe\xf6P\xba\x0e\xbf\x93\x98V\x85]\x88\xcd5" +
	"\xe2QC<\"\xc1\xdduet\x9a+\xb6K\xf0\xa9" +
	"`\x9b6\xa7\xec\xe6\x10\xdd\xfe|\x09\x88\xd6\xb9\xc3\x7f" +
	"\x87TV\xf9\xfd\xc7k\x963\xc6\xf2\xae\x04?\xac\xb3" +
	"\xbc?J\xc4\x15\x09^\xa8\xeb\x7f\xfe2\x11?\x92\xe0" +
	"E\x01\xfc\xa9\xff\x99\x99=\x95\xe0\x97\x02VH\xc6\x11" +
	"\"\xb2^\xf4\x12\xf1\xa2\x04/\xed\xd6K^\x97\x0a\xce" +
	"\xf4059\xb7j\x0f\xe6\x15\x1c\xed\x8e(U$9" +
	"\x94\x09\x18^\xd2\x08\x93@\x98\x902\xcf6\x94\x0e\xae" +
	"9Sv\xff\xb3fs\xe7\x0e\x09\xee\xfb\x97\xd4\xbf\x03" +
	"\x00\x00\xff\xff\x1a\x81\x18\xa4"

func init() {
	schemas.Register(schema_d3996cfefe9023b6,
		0x8434d739f5fd7da6,
		0xb7628e8135d9844e,
		0xb886e6d051434b84,
		0xcb0e6b8da42d98b7,
		0xf882edf00b3cf3b7,
		0xf8ed5b72a4f56af4)
}
