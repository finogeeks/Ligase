// Copyright (C) 2020 Finogeeks Co., Ltd
//
// This program is free software: you can redistribute it and/or  modify
// it under the terms of the GNU Affero General Public License, version 3,
// as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by capnpc-go. DO NOT EDIT.

package external

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type EventFilterCapn struct{ capnp.Struct }

// EventFilterCapn_TypeID is the unique identifier for the type EventFilterCapn.
const EventFilterCapn_TypeID = 0xc3019559a9c4b193

func NewEventFilterCapn(s *capnp.Segment) (EventFilterCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return EventFilterCapn{st}, err
}

func NewRootEventFilterCapn(s *capnp.Segment) (EventFilterCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return EventFilterCapn{st}, err
}

func ReadRootEventFilterCapn(msg *capnp.Message) (EventFilterCapn, error) {
	root, err := msg.RootPtr()
	return EventFilterCapn{root.Struct()}, err
}

func (s EventFilterCapn) String() string {
	str, _ := text.Marshal(0xc3019559a9c4b193, s.Struct)
	return str
}

func (s EventFilterCapn) Limit() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s EventFilterCapn) SetLimit(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s EventFilterCapn) NotSenders() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s EventFilterCapn) HasNotSenders() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s EventFilterCapn) SetNotSenders(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNotSenders sets the notSenders field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventFilterCapn) NewNotSenders(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s EventFilterCapn) NotTypes() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s EventFilterCapn) HasNotTypes() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s EventFilterCapn) SetNotTypes(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewNotTypes sets the notTypes field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventFilterCapn) NewNotTypes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s EventFilterCapn) Senders() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s EventFilterCapn) HasSenders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s EventFilterCapn) SetSenders(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSenders sets the senders field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventFilterCapn) NewSenders(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s EventFilterCapn) Types() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s EventFilterCapn) HasTypes() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s EventFilterCapn) SetTypes(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s EventFilterCapn) NewTypes(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// EventFilterCapn_List is a list of EventFilterCapn.
type EventFilterCapn_List struct{ capnp.List }

// NewEventFilterCapn creates a new list of EventFilterCapn.
func NewEventFilterCapn_List(s *capnp.Segment, sz int32) (EventFilterCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return EventFilterCapn_List{l}, err
}

func (s EventFilterCapn_List) At(i int) EventFilterCapn { return EventFilterCapn{s.List.Struct(i)} }

func (s EventFilterCapn_List) Set(i int, v EventFilterCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EventFilterCapn_List) String() string {
	str, _ := text.MarshalList(0xc3019559a9c4b193, s.List)
	return str
}

// EventFilterCapn_Promise is a wrapper for a EventFilterCapn promised by a client call.
type EventFilterCapn_Promise struct{ *capnp.Pipeline }

func (p EventFilterCapn_Promise) Struct() (EventFilterCapn, error) {
	s, err := p.Pipeline.Struct()
	return EventFilterCapn{s}, err
}

type GetUserFilterRequestCapn struct{ capnp.Struct }

// GetUserFilterRequestCapn_TypeID is the unique identifier for the type GetUserFilterRequestCapn.
const GetUserFilterRequestCapn_TypeID = 0xf442e4831014c326

func NewGetUserFilterRequestCapn(s *capnp.Segment) (GetUserFilterRequestCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetUserFilterRequestCapn{st}, err
}

func NewRootGetUserFilterRequestCapn(s *capnp.Segment) (GetUserFilterRequestCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetUserFilterRequestCapn{st}, err
}

func ReadRootGetUserFilterRequestCapn(msg *capnp.Message) (GetUserFilterRequestCapn, error) {
	root, err := msg.RootPtr()
	return GetUserFilterRequestCapn{root.Struct()}, err
}

func (s GetUserFilterRequestCapn) String() string {
	str, _ := text.Marshal(0xf442e4831014c326, s.Struct)
	return str
}

func (s GetUserFilterRequestCapn) UserID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s GetUserFilterRequestCapn) HasUserID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s GetUserFilterRequestCapn) UserIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s GetUserFilterRequestCapn) SetUserID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s GetUserFilterRequestCapn) FilterID() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s GetUserFilterRequestCapn) HasFilterID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s GetUserFilterRequestCapn) FilterIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s GetUserFilterRequestCapn) SetFilterID(v string) error {
	return s.Struct.SetText(1, v)
}

// GetUserFilterRequestCapn_List is a list of GetUserFilterRequestCapn.
type GetUserFilterRequestCapn_List struct{ capnp.List }

// NewGetUserFilterRequestCapn creates a new list of GetUserFilterRequestCapn.
func NewGetUserFilterRequestCapn_List(s *capnp.Segment, sz int32) (GetUserFilterRequestCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return GetUserFilterRequestCapn_List{l}, err
}

func (s GetUserFilterRequestCapn_List) At(i int) GetUserFilterRequestCapn {
	return GetUserFilterRequestCapn{s.List.Struct(i)}
}

func (s GetUserFilterRequestCapn_List) Set(i int, v GetUserFilterRequestCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetUserFilterRequestCapn_List) String() string {
	str, _ := text.MarshalList(0xf442e4831014c326, s.List)
	return str
}

// GetUserFilterRequestCapn_Promise is a wrapper for a GetUserFilterRequestCapn promised by a client call.
type GetUserFilterRequestCapn_Promise struct{ *capnp.Pipeline }

func (p GetUserFilterRequestCapn_Promise) Struct() (GetUserFilterRequestCapn, error) {
	s, err := p.Pipeline.Struct()
	return GetUserFilterRequestCapn{s}, err
}

type PostUserFilterResponseCapn struct{ capnp.Struct }

// PostUserFilterResponseCapn_TypeID is the unique identifier for the type PostUserFilterResponseCapn.
const PostUserFilterResponseCapn_TypeID = 0xdd42575c766d4d06

func NewPostUserFilterResponseCapn(s *capnp.Segment) (PostUserFilterResponseCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PostUserFilterResponseCapn{st}, err
}

func NewRootPostUserFilterResponseCapn(s *capnp.Segment) (PostUserFilterResponseCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PostUserFilterResponseCapn{st}, err
}

func ReadRootPostUserFilterResponseCapn(msg *capnp.Message) (PostUserFilterResponseCapn, error) {
	root, err := msg.RootPtr()
	return PostUserFilterResponseCapn{root.Struct()}, err
}

func (s PostUserFilterResponseCapn) String() string {
	str, _ := text.Marshal(0xdd42575c766d4d06, s.Struct)
	return str
}

func (s PostUserFilterResponseCapn) FilterID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PostUserFilterResponseCapn) HasFilterID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PostUserFilterResponseCapn) FilterIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PostUserFilterResponseCapn) SetFilterID(v string) error {
	return s.Struct.SetText(0, v)
}

// PostUserFilterResponseCapn_List is a list of PostUserFilterResponseCapn.
type PostUserFilterResponseCapn_List struct{ capnp.List }

// NewPostUserFilterResponseCapn creates a new list of PostUserFilterResponseCapn.
func NewPostUserFilterResponseCapn_List(s *capnp.Segment, sz int32) (PostUserFilterResponseCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PostUserFilterResponseCapn_List{l}, err
}

func (s PostUserFilterResponseCapn_List) At(i int) PostUserFilterResponseCapn {
	return PostUserFilterResponseCapn{s.List.Struct(i)}
}

func (s PostUserFilterResponseCapn_List) Set(i int, v PostUserFilterResponseCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PostUserFilterResponseCapn_List) String() string {
	str, _ := text.MarshalList(0xdd42575c766d4d06, s.List)
	return str
}

// PostUserFilterResponseCapn_Promise is a wrapper for a PostUserFilterResponseCapn promised by a client call.
type PostUserFilterResponseCapn_Promise struct{ *capnp.Pipeline }

func (p PostUserFilterResponseCapn_Promise) Struct() (PostUserFilterResponseCapn, error) {
	s, err := p.Pipeline.Struct()
	return PostUserFilterResponseCapn{s}, err
}

type RoomEventFilterCapn struct{ capnp.Struct }

// RoomEventFilterCapn_TypeID is the unique identifier for the type RoomEventFilterCapn.
const RoomEventFilterCapn_TypeID = 0xb6bafdf57d7bf0ba

func NewRoomEventFilterCapn(s *capnp.Segment) (RoomEventFilterCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RoomEventFilterCapn{st}, err
}

func NewRootRoomEventFilterCapn(s *capnp.Segment) (RoomEventFilterCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RoomEventFilterCapn{st}, err
}

func ReadRootRoomEventFilterCapn(msg *capnp.Message) (RoomEventFilterCapn, error) {
	root, err := msg.RootPtr()
	return RoomEventFilterCapn{root.Struct()}, err
}

func (s RoomEventFilterCapn) String() string {
	str, _ := text.Marshal(0xb6bafdf57d7bf0ba, s.Struct)
	return str
}

func (s RoomEventFilterCapn) EventFilter() (EventFilterCapn, error) {
	p, err := s.Struct.Ptr(0)
	return EventFilterCapn{Struct: p.Struct()}, err
}

func (s RoomEventFilterCapn) HasEventFilter() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RoomEventFilterCapn) SetEventFilter(v EventFilterCapn) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEventFilter sets the eventFilter field to a newly
// allocated EventFilterCapn struct, preferring placement in s's segment.
func (s RoomEventFilterCapn) NewEventFilter() (EventFilterCapn, error) {
	ss, err := NewEventFilterCapn(s.Struct.Segment())
	if err != nil {
		return EventFilterCapn{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s RoomEventFilterCapn) NotRooms() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s RoomEventFilterCapn) HasNotRooms() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RoomEventFilterCapn) SetNotRooms(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewNotRooms sets the notRooms field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RoomEventFilterCapn) NewNotRooms(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RoomEventFilterCapn) Rooms() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s RoomEventFilterCapn) HasRooms() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RoomEventFilterCapn) SetRooms(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewRooms sets the rooms field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RoomEventFilterCapn) NewRooms(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s RoomEventFilterCapn) ContainsURL() bool {
	return s.Struct.Bit(0)
}

func (s RoomEventFilterCapn) SetContainsURL(v bool) {
	s.Struct.SetBit(0, v)
}

// RoomEventFilterCapn_List is a list of RoomEventFilterCapn.
type RoomEventFilterCapn_List struct{ capnp.List }

// NewRoomEventFilterCapn creates a new list of RoomEventFilterCapn.
func NewRoomEventFilterCapn_List(s *capnp.Segment, sz int32) (RoomEventFilterCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return RoomEventFilterCapn_List{l}, err
}

func (s RoomEventFilterCapn_List) At(i int) RoomEventFilterCapn {
	return RoomEventFilterCapn{s.List.Struct(i)}
}

func (s RoomEventFilterCapn_List) Set(i int, v RoomEventFilterCapn) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RoomEventFilterCapn_List) String() string {
	str, _ := text.MarshalList(0xb6bafdf57d7bf0ba, s.List)
	return str
}

// RoomEventFilterCapn_Promise is a wrapper for a RoomEventFilterCapn promised by a client call.
type RoomEventFilterCapn_Promise struct{ *capnp.Pipeline }

func (p RoomEventFilterCapn_Promise) Struct() (RoomEventFilterCapn, error) {
	s, err := p.Pipeline.Struct()
	return RoomEventFilterCapn{s}, err
}

func (p RoomEventFilterCapn_Promise) EventFilter() EventFilterCapn_Promise {
	return EventFilterCapn_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_acdcc264a86fbe56 = "x\xdal\x92\xbfk\x13a\x18\xc7\xbf\xdf\xf7\xbdk\x14" +
	"\xa2\xe6\xc8\x0dni\x83\x08\x8aJ\xd5E\xb3\xa4\xa6V" +
	"\xa9X\xc8\x9bZEq0\xb6\xaf\x18H\xeeb\xeeZ" +
	"\x15-Z\xf4?\xd0B\x05\x07\x9dT\xa8C@\x1c:" +
	"\x88X\x05W\xf7vP\x04q\xeb\xa0\xa3\x9c\xbcI\x13" +
	"\x93\xab\xdcr<|\x7f<\x9f\xe7n\xd8\xde>\"\x0e" +
	"\xdb/F\x80\xc9\x0da\x0fD+\x1bw\xe6\x7f\xffY" +
	"y\x0b\x95$\xa3\xf3\xef\xfc\x973\x1f\xd6\x96a\xcb\x04" +
	"p\xf4\xf8\xa0`zl0\x01\xa4O\x0c\xfe\x00\xa3G" +
	"\xcd\x8f\xaf..r5\xae\xb6Z\x92\xa1o\xe9\x89!" +
	"\xe3\x1b\x1f\xca\x10\x8c\x06&js\x97/\x14\xd6\xe1$" +
	"{\xc54\x92\xe7\xd9\x1c\xd3\xcd\xac\xf1\xbd\xce\xe6\xc1h" +
	"\xef\xaa\x9bz\xf0\xbd\xf0+&\x16F\xfc%\xbb\x9f\xe9" +
	"\xaf-\xf1z\xf6&\xa2\xbe\xe7gt\xadR\x0du\xe3" +
	"\xd0\xb4,\xd7\xbd\\\xc9\xf7kcs\xda\x0bO\xb5\xa6" +
	"\xa3\xe5\xba\x87\"\xa9R\xd2\x02,\x02N\xf9*\xa0\xae" +
	"H\xaa\xaa\xa0C\xba4\xc3\xca\x19@]\x97T\x0f\x05" +
	"\x1d!\\\x0a\xc0Y8\x02\xa8\xbb\x92jI\x90\xd2\xa5" +
	"\x04\x9cE\xe3~,\xa9\x9e\x09Fz\xb3\x08\x89P7" +
	"\x98\xfaw\x1f\x90)0\xf2\xfc\xd0\xec\x13\x00\xe0N\xb0" +
	"(\xc9$\x84y\xcd4\xcc<6\x8c\xa6}/,W" +
	"\xbc\x00\x89\xa9\xd2Y\x12\x82\xe6\x8e\x1d>a\xf8z\xd9" +
	"\x12\xe5\xbag\xd8\xdc.\xdb\xbc\xd9\xf8V\x1b\xa3\x83\xb6" +
	"p\x09P\xf7%\xd5S\x83\xc66\xda\x13\xc3\xbb$\xa9" +
	"\xde\x08:R\xb4\xd9\x9a\x05@-K\xaa\xcf\x82\x8e%" +
	"]Z\x80\xf3\xc9D\xbe\x97Tk\x82\x99j\xa5V\x09" +
	"iC\xd0n\xe3MjoFC6\xb6\xa0x~x" +
	"\xeev]\xff\x07\xfd^`<[\x1c\x99\xd0\xc8\xe31" +
	"}\xdf\xb6\xe8\x07\xe1T\xa0\x1bm\xfc\x92\x0e\xea\xbe\x97" +
	"\x0f\xf4\xe8\xe6\x19\xac\xee\x19v\x18\xba\xa4\xa4\xda-:" +
	"\x11\xe3'\xcd&&6\x19\x8f=\xad\xfbRo\xcc\xea" +
	" \xdc\xd5\x09\xdd\xd6\x0d\xdd\x97\x03\xd4\x1eI5\xdc\xf3" +
	"\xdf\x1c4M\x07$\xd51\xc1\xfcl`zb%}" +
	"\xc5\x7f\x03\x00\x00\xff\xff\x99E\xd4\x82"

func init() {
	schemas.Register(schema_acdcc264a86fbe56,
		0xb6bafdf57d7bf0ba,
		0xc3019559a9c4b193,
		0xdd42575c766d4d06,
		0xf442e4831014c326)
}
